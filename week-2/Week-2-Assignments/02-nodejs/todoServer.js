/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {v4:uuid4} = require('uuid')
const app = express();

app.use(bodyParser.json());

const todos = []

// Get all todos
app.get('/todos', (req, res) => {
  res.json(todos)
})

// Add a todo
app.post('/todos', (req, res) => {
  const uniqueId = uuid4()
  const todoTitle = req.body.title
  const todoDescription = req.body.description
  const completed = false
  const newTodo = {
    id: uniqueId,
    title: todoTitle,
    description: todoDescription,
    completed: false
  }
  todos.push(newTodo)
  res.status(201).json({id: uniqueId})
})

// Get todo by id
app.get('/todos/:id', (req, res) => {
  let uniqueId = req.params.id

  // Check if the todo is in todos
  for(let i = 0; i < todos.length; i++) {
    if(todos[i].id === uniqueId) {
      res.send(todos[i])
      return
    }
  }

  // If the todo is not found in the todos 
  res.status(404).send(`Todo Not found with the id - ${uniqueId}`)
})


// Update a single todo
app.put('/todos/:id', (req, res) => {
  const todoId = req.params.id
  const todoUpdatedTitle = req.body.title
  const todoUpdatedDescription = req.body.description
  const isCompletedStatus = req.body.completed
  for(let i=0; i < todos.length; i++){
    if(todos[i].id === todoId) {
      todos[i].title = todoUpdatedTitle
      todos[i].description = todoUpdatedDescription
      todos[i].completed = isCompletedStatus
      res.status(200).send("todo item updated")
      return
    }  
    res.status(404).send("Todo item not fond")
  }
})

// Delete a todo item
app.delete('/todos/:id', (req, res) => {
  const uniqueId = req.params.id
  for(let i=0; i < todos.length; i++) {
    if(todos[i].id === uniqueId) {
      todos.splice(i, 1)
      res.status(200).send("deleted todo item")
      return
    }

  }
  res.status(404).send("todo item not found")
})
app.listen(2000, () => {
  console.log("Server is started")
})
module.exports = app;
